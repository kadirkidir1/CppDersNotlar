- C'deki pointerlar C++'ta kullanılıyor, ama c'de referans yok. C++'ta genel olarak pointer yerine reference kullanılır.
- Reference olmasaydı operator overloading olamazdı
- Cpp'de pointer yerine ref semantiğini kullanıyor, ama bu pointer ihtiyacını sıfırlamıyor.
- Cpp'de pointerlara 2 alternatif var. Birisi referans semantiği, ikincisi smart pointer(akıllı gösterici).
- Uniq ptr, shared ptr. İleride anlatılacak.
- Cpp'de, C'deki pointerlardan bahsederken Raw, naked pointer olarak bahsedilir. Kitap ve blog yazılarda karşımıza çıkabilir.
- Cpp'de pointer yerine ya referans ya da smart pointer kullanılıyor. Ama raw pointer ihtiyacını sıfırlamıyor.
- Modern cpp, referans semantiğini baya değiştirdi. Modern cpp'de 3 farklı ref türü var.
	- 1 C++11 öncesinde referanslara LValue referans denir.
	- 2 Ayriyeten R value ref var.
	- 3 Forwarding reference(Universel Reference)
- int&r ifadesinde & bir operatör değildir. Bildirimdeki *, [], () gibi tokenlara declaretör denir.
- Referanslar default initializition edilemezler.
- Bir referans bir nesneye bağlanıyor ve scope'u boyunca o nesneye bağlı kalmak zorunda.
- Bir lvalue referansa yalnızca bir lValue exprs ile ilk değer verebiliriz.
- Sabitlerin isimlerle ve operatorlerle yaptığı her bir bileşim bir ifadedir.
- 10 bir ifadedir.
- x + 10 bir ifadedir.
- x +10 > 29 bir ifadedir.
- Bir ifadenin sonuna sonlandırıcı atom konursa o bir state olur. x + 10; bir expression statement'dır.
- 1 Data type
- 2 Value category
- Bir değeri (float)3 ile floata çevirebiliriz ama bunun yerine 3.f diyerek de çevirebiliriz.
- C'de bir ifade ya L Value Exp'tir ya da R value.
- x yalnız başına bir lvalue'dur.   C
- x + 4 rValue'dur.                 C
- x++ rValue'dur.                   C
- ++x lValue'dur.                   C
- Eğer adres operatorunun syntax'ı yaptığımızda error veriyorsa rValue, vermiyorsa lValue'dur. Örneğin      C
  &(*p) ifadesi hata vermez bu sebepten ötürü lValue'dur.                                                   C
- lValue'lar bellekte bir yer tutarlar, rValue'lar hesaplanmaya değer bir ifade ve bellekte yer tutmuyor.   C

- Sol l sağ r gibi bir ifadeyle oturtamayız.
- Hangi ifadeler lValue hangi ifadeler rValue olduğunu öğrenmek gerekiyor.
- C'de hem lVal hem rVal olamaz.
- Cpp'de 3 tane. Bunlara primary value categories deniyor.
    1) pr Value expression      // pure R Value
    2) lValue expression        // classic lValue
    3) xValue expression        // expiring Value

- lValue U (XValue) --> glValue
- RValue U (XValue) --> rValue
- lValue ifadeye yalnızca lValue değer atanabilir.
- C'de koma operatoru sağ value lValue olsa bile virgül operatörüyle oluşturulan ifade rValue expression'dur.
- C++'da sağ value rValue ise, ifade rValue expression'dur.
- C++'ta sabit ifadeler prValue.
- Ön ek ++ operatörü hariç tüm matematiksel işlemler prValue.
- Değişkenler dizi olsun sabit olsun her zaman lValue expression.
- nullptr prValue.
- int* ptr --> lValue
- godbolt.org --> derleyicinin ürettiği assembly kodu gösterir. CompilerExplorer
- Reference'lerin en çok kullanıldığı yer call by reference.
- Reference'lar dilsel bir katman, tamamen yazılım katmanında. Pointer'lar ile yapılan bir yazılımla(aynı amaç için)
  birebir aynı assembly kodunu verir.
- Yazılan kodun güvenilir olmasının en temel ilkelerinden birisi const correctnes olmasından geçiyor.
- int* const p --> up level const, const pointer. Burada p'yi değiştirmeyeceğim tahaddününde bulunuyorum.
- int const* p = const int* p --> pointer to const. İkisi de aynı şeyi ifade eder.
- Referanslarda da const var ama her referans zaten tek bir değeri refere ettiği için mantığı yok. Gereksiz
-